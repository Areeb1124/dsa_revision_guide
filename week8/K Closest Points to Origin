class Solution {
public:
    struct comparison{
        bool operator () (auto &p1,auto &p2){
           return p1.first>p2.first;
        }
    };
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        //On my own
        //I have used minHeap but not recommended it will store all n elements in a priority queue
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,comparison>pq;
        vector<vector<int>>ans;
        for(int i=0;i<points.size();i++){
           int dist=points[i][0]*points[i][0]+points[i][1]*points[i][1]; 
           pq.push({dist,{points[i][0],points[i][1]}});
           if(pq.size()>k){
            ans.push_back({pq.top().second.first,pq.top().second.second});
            pq.pop();
           }
        } 
        if(k>1){
            ans.push_back({pq.top().second.first,pq.top().second.second});
            pq.pop();
        }
        // for(int i=0;i<k;i++){
        //    ans.push_back({pq.top().second.first,pq.top().second.second});
        //     pq.pop(); 
        // }
        // while(!pq.empty()){
        //     ans.push_back({pq.top().second.first,pq.top().second.second});
        //     pq.pop();
        // }
        return ans;

        
    }
};
