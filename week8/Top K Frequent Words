class Solution {
public:
//Using minHeap
    struct compare{
        bool operator() (auto &a,auto &b){
          if(a.second!=b.second){
            return a.second>b.second;
          }
          return a.first<b.first;
        }
    };
    vector<string> topKFrequent(vector<string>& words, int k) {
        priority_queue<pair<string,int>,vector<pair<string,int>>,compare>pq;
        unordered_map<string,int>mpp;
        for(int i=0;i<words.size();i++){
           mpp[words[i]]++;
        }
        for(auto it:mpp){
            pq.push(it);
            if(pq.size()>k){
                pq.pop();
            }
        }
        vector<string>ans;
        while(!pq.empty()){
            ans.push_back(pq.top().first);
            pq.pop();
        }
        reverse(ans.begin(),ans.end());
      
        return ans;
    }
};
