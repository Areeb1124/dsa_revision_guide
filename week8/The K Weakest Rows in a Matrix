class Solution {
public:
    int countSoldiers(vector<int>& v){
       int l=0,h=v.size()-1;
       while(l<=h){
        int mid=l+(h-l)/2;
        if(v[mid]==0){
            h=mid-1;
        }else{
            l=mid+1;
        }

       }
       return l;
    }
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
    //optimised approach using maxHeap
    priority_queue<pair<int,int>> pq;//default sort using first
    for(int i=0;i<mat.size();i++){
        pq.push({countSoldiers(mat[i]),i});
        if(pq.size()>k){
            pq.pop();
        }
    }
    vector<int>ans;
    while(!pq.empty()){
        ans.push_back(pq.top().second);
        pq.pop();
    }
    reverse(ans.begin(),ans.end());
    return ans;
    
        
    }
};
