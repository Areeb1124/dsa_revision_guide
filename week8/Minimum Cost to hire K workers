class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
        //using heap and sliding window concept
        vector<pair<double,int>>workers;
        for(int i=0;i<quality.size();i++){
            workers.push_back({wage[i]*(1.0)/quality[i],quality[i]});//floating point devision
        }
        sort(workers.begin(),workers.end());
        double ans=DBL_MAX;
        int qualitySum=0;
        priority_queue<int>pq;
        for(auto worker:workers){
            double ratio=worker.first;
            qualitySum+=worker.second;
            pq.push(worker.second);
            if(pq.size()>k){
                qualitySum-=pq.top();
                pq.pop();
            }
            if(pq.size()==k){
                ans=min(ans,ratio*qualitySum);
            }
        }
        return ans;
    }
};
