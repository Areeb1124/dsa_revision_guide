class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        deque<pair<int,long long>> dq;
        long long prefixSum=0;
        int minLength=INT_MAX;
        int n=nums.size();
        for(int i=0;i<n;i++){
            prefixSum+=nums[i];
            if(prefixSum>=k){
                minLength=min(minLength,i+1);
            }
            while(!dq.empty() && prefixSum-dq.front().second>=k){
                 minLength=min(minLength,i-dq.front().first); 
                 dq.pop_front();
            }
            while(!dq.empty() && dq.back().second>=prefixSum){
                dq.pop_back();
            }
            dq.push_back({i,prefixSum});
        }
    return minLength==INT_MAX?-1:minLength;
        
    }
};
