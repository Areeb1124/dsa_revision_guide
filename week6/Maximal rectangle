class Solution {
public:
    int lHist(vector<int>& heights){
        int maxArea=0,nse,pse;
        int n=heights.size();
        stack<int>st;
        for(int i=0;i<n;i++){
            while(!st.empty() && heights[st.top()]>heights[i]){
                nse=i;
                int element=heights[st.top()];
                st.pop();
                pse=st.empty()?-1:st.top();
                maxArea=max(maxArea,element*(nse-pse-1));
            }
            st.push(i);
        }
        while(!st.empty()){
            nse=n;
            int element=heights[st.top()];
            st.pop();
            pse=st.empty()?-1:st.top();
            maxArea=max(maxArea,element*(nse-pse-1));

        }
        return maxArea;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        vector<vector<int>> prefixSum(n,vector<int>(m,0));
        int maxArea=0;
        for(int j=0;j<m;j++){
            int sum=0;
            for(int i=0;i<n;i++){
               sum+=matrix[i][j]-'0';
               if(matrix[i][j] == '0'){
                sum=0;
               }
               prefixSum[i][j]=sum;
            }
        } 
        for(int i=0;i<n;i++){
            maxArea=max(maxArea,lHist(prefixSum[i]));
        }
        return maxArea;
    }
};
