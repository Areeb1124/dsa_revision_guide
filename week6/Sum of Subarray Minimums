class Solution {
public:
vector<int>findNSE(vector<int>& arr){
    int n=arr.size();
    stack<int>st;
    vector<int>nse(n);
    for(int i=n-1;i>=0;i--){
       while(!st.empty() && arr[st.top()]>=arr[i]){
        st.pop();
       } 
       if(st.empty()){
        nse[i]=n;
       }
       else{
        nse[i]=st.top();
       }
       st.push(i);
    }
    return nse;
}
vector<int>findPSE(vector<int>& arr){
    int n=arr.size();
    stack<int>st;
    vector<int>pse(n);
    for(int i=0;i<n;i++){
       while(!st.empty() && arr[st.top()]>arr[i]){
        st.pop();
       } 
       if(st.empty()){
        pse[i]=-1;
       }
       else{
        pse[i]=st.top();
       }
       st.push(i);
    }
    return pse;
}
    int sumSubarrayMins(vector<int>& arr) {
         const int MOD=(int)(1e9+7);
         vector<int> nse=findNSE(arr);
         vector<int> pse=findPSE(arr);
         long long total=0;
         int n=arr.size();
         for(int i=0;i<n;i++){
            int left=i-pse[i];
            int right=nse[i]-i;
           total=(total+(left*right*1LL*arr[i]%MOD))% MOD;

         }
         return total;
    }
};
